/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  PredictionRequest,
  PredictionResponse,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    PredictionRequestFromJSON,
    PredictionRequestToJSON,
    PredictionResponseFromJSON,
    PredictionResponseToJSON,
} from '../models/index';

export interface PredictPredictPostRequest {
    predictionRequest: PredictionRequest;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Accepts a text query and returns the predicted ticket category and probabilities.
     * Predict
     */
    async predictPredictPostRaw(requestParameters: PredictPredictPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PredictionResponse>> {
        if (requestParameters['predictionRequest'] == null) {
            throw new runtime.RequiredError(
                'predictionRequest',
                'Required parameter "predictionRequest" was null or undefined when calling predictPredictPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/predict`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PredictionRequestToJSON(requestParameters['predictionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PredictionResponseFromJSON(jsonValue));
    }

    /**
     * Accepts a text query and returns the predicted ticket category and probabilities.
     * Predict
     */
    async predictPredictPost(requestParameters: PredictPredictPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PredictionResponse> {
        const response = await this.predictPredictPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Read Root
     */
    async readRootGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Read Root
     */
    async readRootGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.readRootGetRaw(initOverrides);
        return await response.value();
    }

}
