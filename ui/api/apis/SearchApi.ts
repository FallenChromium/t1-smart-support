/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  SearchRequest,
  SearchResponse,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    SearchRequestFromJSON,
    SearchRequestToJSON,
    SearchResponseFromJSON,
    SearchResponseToJSON,
} from '../models/index';

export interface SearchTicketsSearchPostRequest {
    searchRequest: SearchRequest;
}

/**
 * 
 */
export class SearchApi extends runtime.BaseAPI {

    /**
     * Performs a simple \'Ctrl+F\' style text search across ticket queries and answers. The search is case-insensitive.
     * Search Tickets
     */
    async searchTicketsSearchPostRaw(requestParameters: SearchTicketsSearchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchResponse>> {
        if (requestParameters['searchRequest'] == null) {
            throw new runtime.RequiredError(
                'searchRequest',
                'Required parameter "searchRequest" was null or undefined when calling searchTicketsSearchPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/search`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchRequestToJSON(requestParameters['searchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchResponseFromJSON(jsonValue));
    }

    /**
     * Performs a simple \'Ctrl+F\' style text search across ticket queries and answers. The search is case-insensitive.
     * Search Tickets
     */
    async searchTicketsSearchPost(requestParameters: SearchTicketsSearchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchResponse> {
        const response = await this.searchTicketsSearchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
